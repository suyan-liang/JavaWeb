最常见的客户端
---IE浏览器


最常见的服务器
---Tomcat
************************************************************************************************************************

http协议是应用层的协议，超文本传输协议，html
FTP协议是文件传输协议
************************************************************************************************************************

80端口是HTTP协议的默认端口，网上搜东西通常就是它，这样就无须指定了，否则如果是55，要指定端口如------http://192.168.x.x:55
************************************************************************************************************************

Tomcat服务端作用： 对外提供Web资源访问
---处理请求并给予应答
---Tomcat可以把服务端的数据存储到它的目录下，当客户端有请求时，在目录中寻找所请求的数据，发送给客户端
---Tomcat提供Servlet接口，想让Tomcat帮你运行服务端程序，那么服务端的类必须直接或者间接实现这个接口

************************************************************************************************************************
浏览器剖析
发送的请求

GET / HTTP/1.1             //请求行      请求方式/请求的资源路径/http协议版本
请求消息头
属性名:属性值
Cache-Control: max-age=0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8  //支持文件
Accept-Language: zh-Hans-CN,zh-Hans;q=0.8,en-IE;q=0.5,en;q=0.3           //支持语言
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.18362
Accept-Encoding: gzip, deflate                                           //支持的压缩包格式
Host: 192.168.43.191:9090
Connection: Keep-Alive

//请求体（请求头和请求体之间有一个空行）



补充一些请求头
Referer:表示请求发起时，浏览器中的地址栏地址
Content-Type:发送数据的类型
        application/x-www-form-url|encoded 表示提交的数据格式是name=value&name=value,然后对其进行url编码
        multipart/form-data 表示以多段的方式提交数据给服务器（以流的方式提交，用于上传）
Cache-Control 表示如何控制

************************************************************************************************************************

Tomcat客户端返回的消息:

HTTP/1.1 200   //应答行    http协议版本  应答状态码              200--成功  404---没找到
//应答消息属性信息
Accept-Ranges: bytes
ETag: W/"143-1583147644970"
Last-Modified: Mon, 02 Mar 2020 11:14:04 GMT
Content-Type: text/html   //文本种类
Content-Length: 143       //文本长度
Date: Mon, 02 Mar 2020 11:24:02 GMT
Connection: close
                            //空行
<!doctype html>             //下面都是应答体
<html>
<head>
<meta charset="utf-8">
<title>标题</title>
</head>

<body>
	<p>
		hello java!
	</p>
</body>
</html>

************************************************************************************************************************
IE和服务器的请求回应过程

IE和Tomcat都内置http协议引擎
IE将http请求信息（上面的）发送给Tomcat   请求头上写信息类型了
Tomcat进行应答
IE把应答头进行解析，把应答体根据http协议解析在面板上

我们自己创建的山寨浏览器
仿照IE也发送了http请求
但是接收到Tomcat的数据之后无法解析应答头
所以需要一个能解析http协议的东西就和IE有点像了
************************************************************************************************************************
网络结构

1.C/S:客户端/服务端
特点：客户端和服务端都需自己写，开发和维护成本高

      客户端在本地可以分担一部分运算任务，不然都由服务器执行会累死服务器。参见网络游戏效果和网页游戏效果，3D效果在本地运算，传输的是个人坐标

2.B/S:浏览器/服务端
特点：只需要编写服务端，客户端由浏览器取代，开发和维护成本低

      所有运算都要在服务器端完成


************************************************************************************************************************
